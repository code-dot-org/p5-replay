AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: p5-replay service

Parameters:
  DestinationBucketName:
    Type: String
  SourceBucketName:
    Type: String
  HostedZoneName:
    Type: String
    AllowedPattern: '.*\.$'
    ConstraintDescription: Must end with trailing dot `.`
  DomainName:
    Type: String

Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 30
    MemorySize: 3008
    Environment:
      Variables:
        SOURCE_BUCKET: !Ref SourceBucketName
        DESTINATION_BUCKET: !Ref DestinationBucketName
        QUALITY: 23
  Api:
    Cors: "'*'"

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DestinationBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
  DestinationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DestinationBucket
      PolicyDocument:
        Statement:
        - Action: ['s3:GetObject']
          Effect: Allow
          Resource: !Sub "arn:aws:s3:::${DestinationBucket}/*"
          Principal: '*'
  RunTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: handler.runTest
      Role: !ImportValue p5ReplayRole
      Events:
        Get:
          Type: Api
          Properties:
            Path: /runTest
            Method: get
  Render:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: handler.render
      Role: !ImportValue p5ReplayRole
      Events:
        Post:
          Type: Api
          Properties:
            Path: /render
            Method: post
  RenderFromS3:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: handler.renderFromS3
      Role: !ImportValue p5ReplayRole
      Events:
        Created:
          Type: S3
          Properties:
            Bucket: !Ref SourceBucket
            Events: 's3:ObjectCreated:*'
  GetS3UploadURL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: handler.getS3UploadURL
      Timeout: 5
      Role: !ImportValue p5ReplayRole
      Events:
        Get:
          Type: Api
          Properties:
            Path: /getS3UploadURL
            Method: get
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
  Domain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases: [!Ref DomainName]
        ViewerCertificate:
          AcmCertificateArn: !Ref APICertificate
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
        Origins:
          - Id: API
            # ServerlessRestApi is the Implicit API Logical Resource ID created by SAM, Prod is the default Stage name.
            # Ref: https://awslabs.github.io/serverless-application-model/internals/generated_resources.html#api
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /Prod
            CustomOriginConfig: {OriginProtocolPolicy: https-only}
          - Id: SourceBucket
            DomainName: !GetAtt SourceBucket.DomainName
            S3OriginConfig: {}
          - Id: DestinationBucket
            DomainName: !GetAtt DestinationBucket.DomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: API
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          Compress: true
          DefaultTTL: 0
          ForwardedValues: {QueryString: false}
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - TargetOriginId: SourceBucket
            PathPattern: /source/*
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            Compress: true
            DefaultTTL: 0
            ForwardedValues: {QueryString: false}
            ViewerProtocolPolicy: redirect-to-https
          - TargetOriginId: DestinationBucket
            PathPattern: /videos/*
            AllowedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            DefaultTTL: 0
            ForwardedValues: {QueryString: false}
            ViewerProtocolPolicy: redirect-to-https
Outputs:
  ApiUrl:
    Value: !Sub "https://${DomainName}"
