service: eric-test-p5-replay-service

custom:
  destination_bucket: eric-cdo-p5-replay-videos
  source_bucket: eric-cdo-p5-replay-inputs

provider:
  name: aws
  runtime: nodejs8.10
  profile: p5-replay # make sure to set up .awscredentials locally, following .awscredentials.sample as template
  timeout: 30 # for API gateway function must be <= 30
  stage: dev
  region: us-east-1
  memorySize: 3008
  environment:
    DESTINATION_BUCKET: ${self:custom.destination_bucket}
    SOURCE_BUCKET: ${self:custom.source_bucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:custom.destination_bucket}
            - "/*"
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:custom.source_bucket}
            - "/*"

functions:
  runTest:
    handler: handler.runTest
    events:
      - http:
          path: runTest
          method: get
          cors: true
  render:
    handler: handler.render
    events:
      - http:
          path: render
          method: post
          cors: true
  renderFromS3:
    handler: handler.renderFromS3
    timeout: 90
    events:
      - s3:
          bucket: ${self:custom.source_bucket} # This will create the source bucket
          event: s3:ObjectCreated:*
  getS3UploadURL:
    handler: handler.getS3UploadURL
    timeout: 5
    events:
      - http:
          path: getS3UploadURL
          method: get
          cors: true

resources:
  Resources:
    S3BucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.destination_bucket}
        PolicyDocument:
          Statement:
            - Principal: "*"
              Action:
                - s3:GetObject
              Effect: Allow
              Sid: "PublicReadPermission"
              Resource:
                - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - ${self:custom.destination_bucket}
                    - "/*"
    UploadDestination:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.destination_bucket}
        AccessControl: PublicRead
        # TODO: verify that CORS requests work
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
